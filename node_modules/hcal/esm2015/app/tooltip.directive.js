/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
export class TooltipDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _renderRef
     */
    constructor(_elementRef, _renderRef) {
        this._elementRef = _elementRef;
        this._renderRef = _renderRef;
        this.delay = 1000;
        this.isLabel = true;
        this.element = this._renderRef.selectRootElement(this._elementRef.nativeElement);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    create(position) {
        this.parent = this._renderRef.parentNode(this.element);
        this.tooltipSpan = this._renderRef.createElement('span');
        this.tooltipText = this._renderRef.createText(this.tooltipHcal);
        this._renderRef.appendChild(this.tooltipSpan, this.tooltipText);
        switch (position) {
            case 'top':
                this.insertBefore();
                break;
            case 'bottom':
                this.insertAfter();
                break;
            default:
                this.insertAfter();
                break;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.create(this.position);
        this._renderRef.addClass(this.tooltipSpan, 'off-tooltipHcal');
    }
    /**
     * @param {?} delay
     * @param {?} _renderRef
     * @param {?} tooltipSpan
     * @param {?} position
     * @param {?} element
     * @param {?} isLabel
     * @return {?}
     */
    setTooltipInterval(delay, _renderRef, tooltipSpan, position, element, isLabel) {
        this.onDelay = setTimeout(function () {
            _renderRef.removeClass(tooltipSpan, 'off-tooltipHcal');
            _renderRef.addClass(tooltipSpan, 'on-tooltipHcal');
            _renderRef.addClass(tooltipSpan, position);
            /** @type {?} */
            let marginTop = '';
            if (isLabel) {
                marginTop = `calc(75% - ${element.offsetHeight / 2}px)`;
            }
            else {
                marginTop = `calc(50% - ${element.offsetHeight / 2}px)`;
            }
            /** @type {?} */
            const marginLeft = `calc(50% - ${tooltipSpan.offsetWidth / 2}px`;
            if (position === 'right' || position === 'left') {
                _renderRef.setStyle(tooltipSpan, 'top', marginTop);
                console.log(tooltipSpan.offsetHeight);
            }
            else {
                _renderRef.setStyle(tooltipSpan, 'left', marginLeft);
            }
        }, delay, false);
    }
    /**
     * @return {?}
     */
    onMouseOver() {
        this.setTooltipInterval(this.delay, this._renderRef, this.tooltipSpan, this.position, this.element, this.isLabel);
    }
    /**
     * @return {?}
     */
    outMouseOver() {
        clearTimeout(this.onDelay);
        this._renderRef.removeClass(this.tooltipSpan, this.position);
        this._renderRef.removeClass(this.tooltipSpan, 'on-tooltipHcal');
        this._renderRef.addClass(this.tooltipSpan, 'off-tooltipHcal');
    }
    /**
     * @return {?}
     */
    insertBefore() {
        this._renderRef.insertBefore(this.parent, this.tooltipSpan, this.element);
    }
    /**
     * @return {?}
     */
    insertAfter() {
        this._renderRef.appendChild(this.parent, this.tooltipSpan);
    }
}
TooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tooltipHcal]'
            },] },
];
/** @nocollapse */
TooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TooltipDirective.propDecorators = {
    tooltipHcal: [{ type: Input }],
    position: [{ type: Input }],
    delay: [{ type: Input }],
    isLabel: [{ type: Input }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    outMouseOver: [{ type: HostListener, args: ['mouseleave',] }]
};
function TooltipDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    TooltipDirective.prototype.tooltipHcal;
    /** @type {?} */
    TooltipDirective.prototype.position;
    /** @type {?} */
    TooltipDirective.prototype.delay;
    /** @type {?} */
    TooltipDirective.prototype.isLabel;
    /** @type {?} */
    TooltipDirective.prototype.element;
    /** @type {?} */
    TooltipDirective.prototype.tooltipSpan;
    /** @type {?} */
    TooltipDirective.prototype.tooltipText;
    /** @type {?} */
    TooltipDirective.prototype.parent;
    /** @type {?} */
    TooltipDirective.prototype.onDelay;
    /** @type {?} */
    TooltipDirective.prototype._elementRef;
    /** @type {?} */
    TooltipDirective.prototype._renderRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9oY2FsLyIsInNvdXJjZXMiOlsiYXBwL3Rvb2x0aXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUs1RixNQUFNOzs7OztJQVlKLFlBQW9CLFdBQXVCLEVBQVUsVUFBcUI7UUFBdEQsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFXO3FCQVJ6RCxJQUFJO3VCQUNGLElBQUk7UUFRckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDbEY7Ozs7O0lBRUQsTUFBTSxDQUFDLFFBQVE7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWhFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFakIsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDcEIsS0FBSyxDQUFDO1lBRVIsS0FBSyxRQUFRO2dCQUNYLElBQUks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U0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2FBQzFCOzs7O1lBSmtCLFVBQVU7WUFBK0IsU0FBUzs7OzBCQU9sRSxLQUFLO3VCQUNMLEtBQUs7b0JBQ0wsS0FBSztzQkFDTCxLQUFLOzBCQWdFTCxZQUFZLFNBQUMsV0FBVzsyQkFJeEIsWUFBWSxTQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdG9vbHRpcEhjYWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBUb29sdGlwRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSB0b29sdGlwSGNhbDogc3RyaW5nO1xuICBASW5wdXQoKSBwb3NpdGlvbjogc3RyaW5nO1xuICBASW5wdXQoKSBkZWxheSA9IDEwMDA7XG4gIEBJbnB1dCgpIGlzTGFiZWwgPSB0cnVlO1xuICBlbGVtZW50O1xuICB0b29sdGlwU3BhbjtcbiAgdG9vbHRpcFRleHQ7XG4gIHBhcmVudDtcbiAgb25EZWxheTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIF9yZW5kZXJSZWY6IFJlbmRlcmVyMikge1xuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuX3JlbmRlclJlZi5zZWxlY3RSb290RWxlbWVudCh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgY3JlYXRlKHBvc2l0aW9uKSB7XG4gICAgdGhpcy5wYXJlbnQgPSB0aGlzLl9yZW5kZXJSZWYucGFyZW50Tm9kZSh0aGlzLmVsZW1lbnQpO1xuICAgIHRoaXMudG9vbHRpcFNwYW4gPSB0aGlzLl9yZW5kZXJSZWYuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMudG9vbHRpcFRleHQgPSB0aGlzLl9yZW5kZXJSZWYuY3JlYXRlVGV4dCh0aGlzLnRvb2x0aXBIY2FsKTtcbiAgICB0aGlzLl9yZW5kZXJSZWYuYXBwZW5kQ2hpbGQodGhpcy50b29sdGlwU3BhbiwgdGhpcy50b29sdGlwVGV4dCk7XG5cbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG5cbiAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICB0aGlzLmluc2VydEFmdGVyKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmluc2VydEFmdGVyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlKHRoaXMucG9zaXRpb24pO1xuICAgIHRoaXMuX3JlbmRlclJlZi5hZGRDbGFzcyh0aGlzLnRvb2x0aXBTcGFuLCAnb2ZmLXRvb2x0aXBIY2FsJyk7XG4gIH1cblxuICBzZXRUb29sdGlwSW50ZXJ2YWwoZGVsYXksIF9yZW5kZXJSZWYsIHRvb2x0aXBTcGFuLCBwb3NpdGlvbiwgZWxlbWVudCwgaXNMYWJlbCkge1xuICAgIHRoaXMub25EZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3JlbmRlclJlZi5yZW1vdmVDbGFzcyh0b29sdGlwU3BhbiwgJ29mZi10b29sdGlwSGNhbCcpO1xuICAgICAgX3JlbmRlclJlZi5hZGRDbGFzcyh0b29sdGlwU3BhbiwgJ29uLXRvb2x0aXBIY2FsJyk7XG4gICAgICBfcmVuZGVyUmVmLmFkZENsYXNzKHRvb2x0aXBTcGFuLCBwb3NpdGlvbik7XG5cbiAgICAgIGxldCBtYXJnaW5Ub3AgPSAnJztcblxuICAgICAgaWYgKGlzTGFiZWwpIHtcbiAgICAgICAgbWFyZ2luVG9wID0gYGNhbGMoNzUlIC0gJHsgZWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyfXB4KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJnaW5Ub3AgPSBgY2FsYyg1MCUgLSAkeyBlbGVtZW50Lm9mZnNldEhlaWdodCAvIDJ9cHgpYDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGBjYWxjKDUwJSAtICR7IHRvb2x0aXBTcGFuLm9mZnNldFdpZHRoIC8gMn1weGA7XG5cbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0JyB8fCBwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIF9yZW5kZXJSZWYuc2V0U3R5bGUodG9vbHRpcFNwYW4sICd0b3AnLCBtYXJnaW5Ub3ApO1xuICAgICAgICBjb25zb2xlLmxvZyh0b29sdGlwU3Bhbi5vZmZzZXRIZWlnaHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3JlbmRlclJlZi5zZXRTdHlsZSh0b29sdGlwU3BhbiwgJ2xlZnQnLCBtYXJnaW5MZWZ0KTtcbiAgICAgIH1cblxuICAgIH0sIGRlbGF5LCBmYWxzZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZW92ZXInKSBvbk1vdXNlT3ZlcigpIHtcbiAgICB0aGlzLnNldFRvb2x0aXBJbnRlcnZhbCh0aGlzLmRlbGF5LCB0aGlzLl9yZW5kZXJSZWYsIHRoaXMudG9vbHRpcFNwYW4sIHRoaXMucG9zaXRpb24sIHRoaXMuZWxlbWVudCwgdGhpcy5pc0xhYmVsKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKSBvdXRNb3VzZU92ZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMub25EZWxheSk7XG4gICAgdGhpcy5fcmVuZGVyUmVmLnJlbW92ZUNsYXNzKHRoaXMudG9vbHRpcFNwYW4sIHRoaXMucG9zaXRpb24pO1xuICAgIHRoaXMuX3JlbmRlclJlZi5yZW1vdmVDbGFzcyh0aGlzLnRvb2x0aXBTcGFuLCAnb24tdG9vbHRpcEhjYWwnKTtcbiAgICB0aGlzLl9yZW5kZXJSZWYuYWRkQ2xhc3ModGhpcy50b29sdGlwU3BhbiwgJ29mZi10b29sdGlwSGNhbCcpO1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKCkge1xuICAgIHRoaXMuX3JlbmRlclJlZi5pbnNlcnRCZWZvcmUodGhpcy5wYXJlbnQsIHRoaXMudG9vbHRpcFNwYW4sIHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICBpbnNlcnRBZnRlcigpIHtcbiAgICB0aGlzLl9yZW5kZXJSZWYuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnQsIHRoaXMudG9vbHRpcFNwYW4pO1xuICB9XG5cbn1cbiJdfQ==