/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective(_elementRef, _renderRef) {
        this._elementRef = _elementRef;
        this._renderRef = _renderRef;
        this.delay = 1000;
        this.isLabel = true;
        this.element = this._renderRef.selectRootElement(this._elementRef.nativeElement);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    TooltipDirective.prototype.create = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.parent = this._renderRef.parentNode(this.element);
        this.tooltipSpan = this._renderRef.createElement('span');
        this.tooltipText = this._renderRef.createText(this.tooltipHcal);
        this._renderRef.appendChild(this.tooltipSpan, this.tooltipText);
        switch (position) {
            case 'top':
                this.insertBefore();
                break;
            case 'bottom':
                this.insertAfter();
                break;
            default:
                this.insertAfter();
                break;
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.create(this.position);
        this._renderRef.addClass(this.tooltipSpan, 'off-tooltipHcal');
    };
    /**
     * @param {?} delay
     * @param {?} _renderRef
     * @param {?} tooltipSpan
     * @param {?} position
     * @param {?} element
     * @param {?} isLabel
     * @return {?}
     */
    TooltipDirective.prototype.setTooltipInterval = /**
     * @param {?} delay
     * @param {?} _renderRef
     * @param {?} tooltipSpan
     * @param {?} position
     * @param {?} element
     * @param {?} isLabel
     * @return {?}
     */
    function (delay, _renderRef, tooltipSpan, position, element, isLabel) {
        this.onDelay = setTimeout(function () {
            _renderRef.removeClass(tooltipSpan, 'off-tooltipHcal');
            _renderRef.addClass(tooltipSpan, 'on-tooltipHcal');
            _renderRef.addClass(tooltipSpan, position);
            /** @type {?} */
            var marginTop = '';
            if (isLabel) {
                marginTop = "calc(75% - " + element.offsetHeight / 2 + "px)";
            }
            else {
                marginTop = "calc(50% - " + element.offsetHeight / 2 + "px)";
            }
            /** @type {?} */
            var marginLeft = "calc(50% - " + tooltipSpan.offsetWidth / 2 + "px";
            if (position === 'right' || position === 'left') {
                _renderRef.setStyle(tooltipSpan, 'top', marginTop);
                console.log(tooltipSpan.offsetHeight);
            }
            else {
                _renderRef.setStyle(tooltipSpan, 'left', marginLeft);
            }
        }, delay, false);
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseOver = /**
     * @return {?}
     */
    function () {
        this.setTooltipInterval(this.delay, this._renderRef, this.tooltipSpan, this.position, this.element, this.isLabel);
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.outMouseOver = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.onDelay);
        this._renderRef.removeClass(this.tooltipSpan, this.position);
        this._renderRef.removeClass(this.tooltipSpan, 'on-tooltipHcal');
        this._renderRef.addClass(this.tooltipSpan, 'off-tooltipHcal');
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.insertBefore = /**
     * @return {?}
     */
    function () {
        this._renderRef.insertBefore(this.parent, this.tooltipSpan, this.element);
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.insertAfter = /**
     * @return {?}
     */
    function () {
        this._renderRef.appendChild(this.parent, this.tooltipSpan);
    };
    TooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tooltipHcal]'
                },] },
    ];
    /** @nocollapse */
    TooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TooltipDirective.propDecorators = {
        tooltipHcal: [{ type: Input }],
        position: [{ type: Input }],
        delay: [{ type: Input }],
        isLabel: [{ type: Input }],
        onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
        outMouseOver: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return TooltipDirective;
}());
export { TooltipDirective };
function TooltipDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    TooltipDirective.prototype.tooltipHcal;
    /** @type {?} */
    TooltipDirective.prototype.position;
    /** @type {?} */
    TooltipDirective.prototype.delay;
    /** @type {?} */
    TooltipDirective.prototype.isLabel;
    /** @type {?} */
    TooltipDirective.prototype.element;
    /** @type {?} */
    TooltipDirective.prototype.tooltipSpan;
    /** @type {?} */
    TooltipDirective.prototype.tooltipText;
    /** @type {?} */
    TooltipDirective.prototype.parent;
    /** @type {?} */
    TooltipDirective.prototype.onDelay;
    /** @type {?} */
    TooltipDirective.prototype._elementRef;
    /** @type {?} */
    TooltipDirective.prototype._renderRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9oY2FsLyIsInNvdXJjZXMiOlsiYXBwL3Rvb2x0aXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7SUFpQjFGLDBCQUFvQixXQUF1QixFQUFVLFVBQXFCO1FBQXRELGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBVztxQkFSekQsSUFBSTt1QkFDRixJQUFJO1FBUXJCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2xGOzs7OztJQUVELGlDQUFNOzs7O0lBQU4sVUFBTyxRQUFRO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVoRSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRWpCLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQztZQUVSLEtBQUssUUFBUTtnQkFDWCxJQUFJLENB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SSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDNUQ7O2dCQXpGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCOzs7O2dCQUprQixVQUFVO2dCQUErQixTQUFTOzs7OEJBT2xFLEtBQUs7MkJBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7OEJBZ0VMLFlBQVksU0FBQyxXQUFXOytCQUl4QixZQUFZLFNBQUMsWUFBWTs7MkJBOUU1Qjs7U0FLYSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdG9vbHRpcEhjYWxdJ1xufSlcbmV4cG9ydCBjbGFzcyBUb29sdGlwRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSB0b29sdGlwSGNhbDogc3RyaW5nO1xuICBASW5wdXQoKSBwb3NpdGlvbjogc3RyaW5nO1xuICBASW5wdXQoKSBkZWxheSA9IDEwMDA7XG4gIEBJbnB1dCgpIGlzTGFiZWwgPSB0cnVlO1xuICBlbGVtZW50O1xuICB0b29sdGlwU3BhbjtcbiAgdG9vbHRpcFRleHQ7XG4gIHBhcmVudDtcbiAgb25EZWxheTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIF9yZW5kZXJSZWY6IFJlbmRlcmVyMikge1xuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuX3JlbmRlclJlZi5zZWxlY3RSb290RWxlbWVudCh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgY3JlYXRlKHBvc2l0aW9uKSB7XG4gICAgdGhpcy5wYXJlbnQgPSB0aGlzLl9yZW5kZXJSZWYucGFyZW50Tm9kZSh0aGlzLmVsZW1lbnQpO1xuICAgIHRoaXMudG9vbHRpcFNwYW4gPSB0aGlzLl9yZW5kZXJSZWYuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMudG9vbHRpcFRleHQgPSB0aGlzLl9yZW5kZXJSZWYuY3JlYXRlVGV4dCh0aGlzLnRvb2x0aXBIY2FsKTtcbiAgICB0aGlzLl9yZW5kZXJSZWYuYXBwZW5kQ2hpbGQodGhpcy50b29sdGlwU3BhbiwgdGhpcy50b29sdGlwVGV4dCk7XG5cbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG5cbiAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICB0aGlzLmluc2VydEFmdGVyKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmluc2VydEFmdGVyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY3JlYXRlKHRoaXMucG9zaXRpb24pO1xuICAgIHRoaXMuX3JlbmRlclJlZi5hZGRDbGFzcyh0aGlzLnRvb2x0aXBTcGFuLCAnb2ZmLXRvb2x0aXBIY2FsJyk7XG4gIH1cblxuICBzZXRUb29sdGlwSW50ZXJ2YWwoZGVsYXksIF9yZW5kZXJSZWYsIHRvb2x0aXBTcGFuLCBwb3NpdGlvbiwgZWxlbWVudCwgaXNMYWJlbCkge1xuICAgIHRoaXMub25EZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgX3JlbmRlclJlZi5yZW1vdmVDbGFzcyh0b29sdGlwU3BhbiwgJ29mZi10b29sdGlwSGNhbCcpO1xuICAgICAgX3JlbmRlclJlZi5hZGRDbGFzcyh0b29sdGlwU3BhbiwgJ29uLXRvb2x0aXBIY2FsJyk7XG4gICAgICBfcmVuZGVyUmVmLmFkZENsYXNzKHRvb2x0aXBTcGFuLCBwb3NpdGlvbik7XG5cbiAgICAgIGxldCBtYXJnaW5Ub3AgPSAnJztcblxuICAgICAgaWYgKGlzTGFiZWwpIHtcbiAgICAgICAgbWFyZ2luVG9wID0gYGNhbGMoNzUlIC0gJHsgZWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyfXB4KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJnaW5Ub3AgPSBgY2FsYyg1MCUgLSAkeyBlbGVtZW50Lm9mZnNldEhlaWdodCAvIDJ9cHgpYDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGBjYWxjKDUwJSAtICR7IHRvb2x0aXBTcGFuLm9mZnNldFdpZHRoIC8gMn1weGA7XG5cbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0JyB8fCBwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIF9yZW5kZXJSZWYuc2V0U3R5bGUodG9vbHRpcFNwYW4sICd0b3AnLCBtYXJnaW5Ub3ApO1xuICAgICAgICBjb25zb2xlLmxvZyh0b29sdGlwU3Bhbi5vZmZzZXRIZWlnaHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3JlbmRlclJlZi5zZXRTdHlsZSh0b29sdGlwU3BhbiwgJ2xlZnQnLCBtYXJnaW5MZWZ0KTtcbiAgICAgIH1cblxuICAgIH0sIGRlbGF5LCBmYWxzZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZW92ZXInKSBvbk1vdXNlT3ZlcigpIHtcbiAgICB0aGlzLnNldFRvb2x0aXBJbnRlcnZhbCh0aGlzLmRlbGF5LCB0aGlzLl9yZW5kZXJSZWYsIHRoaXMudG9vbHRpcFNwYW4sIHRoaXMucG9zaXRpb24sIHRoaXMuZWxlbWVudCwgdGhpcy5pc0xhYmVsKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKSBvdXRNb3VzZU92ZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMub25EZWxheSk7XG4gICAgdGhpcy5fcmVuZGVyUmVmLnJlbW92ZUNsYXNzKHRoaXMudG9vbHRpcFNwYW4sIHRoaXMucG9zaXRpb24pO1xuICAgIHRoaXMuX3JlbmRlclJlZi5yZW1vdmVDbGFzcyh0aGlzLnRvb2x0aXBTcGFuLCAnb24tdG9vbHRpcEhjYWwnKTtcbiAgICB0aGlzLl9yZW5kZXJSZWYuYWRkQ2xhc3ModGhpcy50b29sdGlwU3BhbiwgJ29mZi10b29sdGlwSGNhbCcpO1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKCkge1xuICAgIHRoaXMuX3JlbmRlclJlZi5pbnNlcnRCZWZvcmUodGhpcy5wYXJlbnQsIHRoaXMudG9vbHRpcFNwYW4sIHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICBpbnNlcnRBZnRlcigpIHtcbiAgICB0aGlzLl9yZW5kZXJSZWYuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnQsIHRoaXMudG9vbHRpcFNwYW4pO1xuICB9XG5cbn1cbiJdfQ==